// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"sync"
)

var (
	lockoutputMockOutput sync.RWMutex
)

// Ensure, that outputMock does implement output.
// If this is not the case, regenerate this file with moq.
var _ output = &outputMock{}

// outputMock is a mock implementation of output.
//
//     func TestSomethingThatUsesoutput(t *testing.T) {
//
//         // make and configure a mocked output
//         mockedoutput := &outputMock{
//             OutputFunc: func(in1 []*OutputFare) error {
// 	               panic("mock out the Output method")
//             },
//         }
//
//         // use mockedoutput in code that requires output
//         // and then make assertions.
//
//     }
type outputMock struct {
	// OutputFunc mocks the Output method.
	OutputFunc func(in1 []*OutputFare) error

	// calls tracks calls to the methods.
	calls struct {
		// Output holds details about calls to the Output method.
		Output []struct {
			// In1 is the in1 argument value.
			In1 []*OutputFare
		}
	}
}

// Output calls OutputFunc.
func (mock *outputMock) Output(in1 []*OutputFare) error {
	if mock.OutputFunc == nil {
		panic("outputMock.OutputFunc: method is nil but output.Output was just called")
	}
	callInfo := struct {
		In1 []*OutputFare
	}{
		In1: in1,
	}
	lockoutputMockOutput.Lock()
	mock.calls.Output = append(mock.calls.Output, callInfo)
	lockoutputMockOutput.Unlock()
	return mock.OutputFunc(in1)
}

// OutputCalls gets all the calls that were made to Output.
// Check the length with:
//     len(mockedoutput.OutputCalls())
func (mock *outputMock) OutputCalls() []struct {
	In1 []*OutputFare
} {
	var calls []struct {
		In1 []*OutputFare
	}
	lockoutputMockOutput.RLock()
	calls = mock.calls.Output
	lockoutputMockOutput.RUnlock()
	return calls
}
